{"ast":null,"code":"const ALIAS = Symbol.for('yaml.alias');\nconst DOC = Symbol.for('yaml.document');\nconst MAP = Symbol.for('yaml.map');\nconst PAIR = Symbol.for('yaml.pair');\nconst SCALAR = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = node => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = node => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = node => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = node => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar = node => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\nconst isSeq = node => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection(node) {\n  if (node && typeof node === 'object') switch (node[NODE_TYPE]) {\n    case MAP:\n    case SEQ:\n      return true;\n  }\n  return false;\n}\nfunction isNode(node) {\n  if (node && typeof node === 'object') switch (node[NODE_TYPE]) {\n    case ALIAS:\n    case MAP:\n    case SCALAR:\n    case SEQ:\n      return true;\n  }\n  return false;\n}\nconst hasAnchor = node => (isScalar(node) || isCollection(node)) && !!node.anchor;\nexport { ALIAS, DOC, MAP, NODE_TYPE, PAIR, SCALAR, SEQ, hasAnchor, isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq };","map":null,"metadata":{},"sourceType":"module"}