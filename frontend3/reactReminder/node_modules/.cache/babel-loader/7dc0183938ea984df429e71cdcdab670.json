{"ast":null,"code":"'use strict';\n\nconst _require = require('util'),\n  promisify = _require.promisify;\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile);\n\n// Path to included `xdg-open`\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` â†’ `C:\\Program Files\\Example\\MyApp.exe`\nconst wslToWindowsPath = async path => {\n  const _await$pExecFile = await pExecFile('wslpath', ['-w', path]),\n    stdout = _await$pExecFile.stdout;\n  return stdout.trim();\n};\nmodule.exports = async (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n  options = {\n    wait: false,\n    background: false,\n    ...options\n  };\n  let command;\n  let appArguments = [];\n  const cliArguments = [];\n  const childProcessOptions = {};\n  if (Array.isArray(options.app)) {\n    appArguments = options.app.slice(1);\n    options.app = options.app[0];\n  }\n  if (process.platform === 'darwin') {\n    command = 'open';\n    if (options.wait) {\n      cliArguments.push('--wait-apps');\n    }\n    if (options.background) {\n      cliArguments.push('--background');\n    }\n    if (options.app) {\n      cliArguments.push('-a', options.app);\n    }\n  } else if (process.platform === 'win32' || isWsl) {\n    command = 'cmd' + (isWsl ? '.exe' : '');\n    cliArguments.push('/c', 'start', '\"\"', '/b');\n    target = target.replace(/&/g, '^&');\n    if (options.wait) {\n      cliArguments.push('/wait');\n    }\n    if (options.app) {\n      if (isWsl && options.app.startsWith('/mnt/')) {\n        const windowsPath = await wslToWindowsPath(options.app);\n        options.app = windowsPath;\n      }\n      cliArguments.push(options.app);\n    }\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n  } else {\n    if (options.app) {\n      command = options.app;\n    } else {\n      // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n      const isBundled = !__dirname || __dirname === '/';\n\n      // Check if local `xdg-open` exists and is executable.\n      let exeLocalXdgOpen = false;\n      try {\n        await pAccess(localXdgOpenPath, fs.constants.X_OK);\n        exeLocalXdgOpen = true;\n      } catch (error) {}\n      const useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n      command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n    }\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n    if (!options.wait) {\n      // `xdg-open` will block the process unless stdio is ignored\n      // and it's detached from the parent even if it's unref'd.\n      childProcessOptions.stdio = 'ignore';\n      childProcessOptions.detached = true;\n    }\n  }\n  cliArguments.push(target);\n  if (process.platform === 'darwin' && appArguments.length > 0) {\n    cliArguments.push('--args', ...appArguments);\n  }\n  const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n  if (options.wait) {\n    return new Promise((resolve, reject) => {\n      subprocess.once('error', reject);\n      subprocess.once('close', exitCode => {\n        if (exitCode > 0) {\n          reject(new Error(\"Exited with code \".concat(exitCode)));\n          return;\n        }\n        resolve(subprocess);\n      });\n    });\n  }\n  subprocess.unref();\n  return subprocess;\n};","map":null,"metadata":{},"sourceType":"script"}