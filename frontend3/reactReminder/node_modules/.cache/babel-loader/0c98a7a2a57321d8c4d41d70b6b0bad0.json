{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promptForDirectory = exports.confirm = exports.promptOnce = exports.prompt = void 0;\nconst inquirer = require(\"inquirer\");\nconst fsutils_1 = require(\"./fsutils\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\ninquirer.registerPrompt(\"autocomplete\", require(\"inquirer-autocomplete-prompt\"));\nasync function prompt(options, questions) {\n  const prompts = [];\n  for (const question of questions) {\n    if (question.name && options[question.name] === undefined) {\n      prompts.push(question);\n    }\n  }\n  if (prompts.length && options.nonInteractive) {\n    const missingOptions = Array.from(new Set(prompts.map(p => p.name))).join(\", \");\n    throw new error_1.FirebaseError(\"Missing required options (\".concat(missingOptions, \") while running in non-interactive mode\"), {\n      children: prompts\n    });\n  }\n  const answers = await inquirer.prompt(prompts);\n  Object.keys(answers).forEach(k => {\n    options[k] = answers[k];\n  });\n  return answers;\n}\nexports.prompt = prompt;\nasync function promptOnce(question, options = {}) {\n  var _a;\n  question.name = ((_a = question.name) === null || _a === void 0 ? void 0 : _a.replace(/\\./g, \"/\")) || \"question\";\n  await prompt(options, [question]);\n  return options[question.name];\n}\nexports.promptOnce = promptOnce;\nasync function confirm(args) {\n  var _a;\n  if (!args.nonInteractive && !args.force) {\n    const message = (_a = args.message) !== null && _a !== void 0 ? _a : \"Do you wish to continue?\";\n    return await promptOnce({\n      type: \"confirm\",\n      message,\n      default: args.default\n    });\n  } else if (args.nonInteractive && !args.force) {\n    throw new error_1.FirebaseError(\"Pass the --force flag to use this command in non-interactive mode\");\n  } else {\n    return true;\n  }\n}\nexports.confirm = confirm;\nasync function promptForDirectory(args) {\n  let dir = \"\";\n  while (!dir) {\n    const target = args.config.path(await promptOnce({\n      message: args.message\n    }));\n    if ((0, fsutils_1.fileExistsSync)(target)) {\n      logger_1.logger.error(\"Expected a directory, but \".concat(target, \" is a file. Please provide a path to a directory.\"));\n    } else if (!(0, fsutils_1.dirExistsSync)(target)) {\n      logger_1.logger.error(\"Directory \".concat(target, \" not found. Please provide a path to a directory\"));\n    } else {\n      dir = target;\n    }\n  }\n  return dir;\n}\nexports.promptForDirectory = promptForDirectory;","map":null,"metadata":{},"sourceType":"script"}