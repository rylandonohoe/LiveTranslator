{"ast":null,"code":"import { Alias } from '../nodes/Alias.js';\nimport { isEmptyPath, collectionFromPath } from '../nodes/Collection.js';\nimport { NODE_TYPE, DOC, isNode, isCollection, isScalar } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { toJS } from '../nodes/toJS.js';\nimport { Schema } from '../schema/Schema.js';\nimport { stringifyDocument } from '../stringify/stringifyDocument.js';\nimport { anchorNames, findNewAnchor, createNodeAnchors } from './anchors.js';\nimport { applyReviver } from './applyReviver.js';\nimport { createNode } from './createNode.js';\nimport { Directives } from './directives.js';\nclass Document {\n  constructor(value, replacer, options) {\n    /** A comment before this Document */\n    this.commentBefore = null;\n    /** A comment immediately after this Document */\n    this.comment = null;\n    /** Errors encountered during parsing. */\n    this.errors = [];\n    /** Warnings encountered during parsing. */\n    this.warnings = [];\n    Object.defineProperty(this, NODE_TYPE, {\n      value: DOC\n    });\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n      _replacer = replacer;\n    } else if (options === undefined && replacer) {\n      options = replacer;\n      replacer = undefined;\n    }\n    const opt = Object.assign({\n      intAsBigInt: false,\n      keepSourceTokens: false,\n      logLevel: 'warn',\n      prettyErrors: true,\n      strict: true,\n      stringKeys: false,\n      uniqueKeys: true,\n      version: '1.2'\n    }, options);\n    this.options = opt;\n    let version = opt.version;\n    if (options?._directives) {\n      this.directives = options._directives.atDocument();\n      if (this.directives.yaml.explicit) version = this.directives.yaml.version;\n    } else this.directives = new Directives({\n      version\n    });\n    this.setSchema(version, options);\n    // @ts-expect-error We can't really know that this matches Contents.\n    this.contents = value === undefined ? null : this.createNode(value, _replacer, options);\n  }\n  /**\n   * Create a deep copy of this Document and its contents.\n   *\n   * Custom Node values that inherit from `Object` still refer to their original instances.\n   */\n  clone() {\n    const copy = Object.create(Document.prototype, {\n      [NODE_TYPE]: {\n        value: DOC\n      }\n    });\n    copy.commentBefore = this.commentBefore;\n    copy.comment = this.comment;\n    copy.errors = this.errors.slice();\n    copy.warnings = this.warnings.slice();\n    copy.options = Object.assign({}, this.options);\n    if (this.directives) copy.directives = this.directives.clone();\n    copy.schema = this.schema.clone();\n    // @ts-expect-error We can't really know that this matches Contents.\n    copy.contents = isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;\n    if (this.range) copy.range = this.range.slice();\n    return copy;\n  }\n  /** Adds a value to the document. */\n  add(value) {\n    if (assertCollection(this.contents)) this.contents.add(value);\n  }\n  /** Adds a value to the document. */\n  addIn(path, value) {\n    if (assertCollection(this.contents)) this.contents.addIn(path, value);\n  }\n  /**\n   * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\n   *\n   * If `node` already has an anchor, `name` is ignored.\n   * Otherwise, the `node.anchor` value will be set to `name`,\n   * or if an anchor with that name is already present in the document,\n   * `name` will be used as a prefix for a new unique anchor.\n   * If `name` is undefined, the generated anchor will use 'a' as a prefix.\n   */\n  createAlias(node, name) {\n    if (!node.anchor) {\n      const prev = anchorNames(this);\n      node.anchor =\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;\n    }\n    return new Alias(node.anchor);\n  }\n  createNode(value, replacer, options) {\n    let _replacer = undefined;\n    if (typeof replacer === 'function') {\n      value = replacer.call({\n        '': value\n      }, '', value);\n      _replacer = replacer;\n    } else if (Array.isArray(replacer)) {\n      const keyToStr = v => typeof v === 'number' || v instanceof String || v instanceof Number;\n      const asStr = replacer.filter(keyToStr).map(String);\n      if (asStr.length > 0) replacer = replacer.concat(asStr);\n      _replacer = replacer;\n    } else if (options === undefined && replacer) {\n      options = replacer;\n      replacer = undefined;\n    }\n    const _ref = options ?? {},\n      aliasDuplicateObjects = _ref.aliasDuplicateObjects,\n      anchorPrefix = _ref.anchorPrefix,\n      flow = _ref.flow,\n      keepUndefined = _ref.keepUndefined,\n      onTagObj = _ref.onTagObj,\n      tag = _ref.tag;\n    const _createNodeAnchors = createNodeAnchors(this,\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      anchorPrefix || 'a'),\n      onAnchor = _createNodeAnchors.onAnchor,\n      setAnchors = _createNodeAnchors.setAnchors,\n      sourceObjects = _createNodeAnchors.sourceObjects;\n    const ctx = {\n      aliasDuplicateObjects: aliasDuplicateObjects ?? true,\n      keepUndefined: keepUndefined ?? false,\n      onAnchor,\n      onTagObj,\n      replacer: _replacer,\n      schema: this.schema,\n      sourceObjects\n    };\n    const node = createNode(value, tag, ctx);\n    if (flow && isCollection(node)) node.flow = true;\n    setAnchors();\n    return node;\n  }\n  /**\n   * Convert a key and a value into a `Pair` using the current schema,\n   * recursively wrapping all values as `Scalar` or `Collection` nodes.\n   */\n  createPair(key, value, options = {}) {\n    const k = this.createNode(key, null, options);\n    const v = this.createNode(value, null, options);\n    return new Pair(k, v);\n  }\n  /**\n   * Removes a value from the document.\n   * @returns `true` if the item was found and removed.\n   */\n  delete(key) {\n    return assertCollection(this.contents) ? this.contents.delete(key) : false;\n  }\n  /**\n   * Removes a value from the document.\n   * @returns `true` if the item was found and removed.\n   */\n  deleteIn(path) {\n    if (isEmptyPath(path)) {\n      if (this.contents == null) return false;\n      // @ts-expect-error Presumed impossible if Strict extends false\n      this.contents = null;\n      return true;\n    }\n    return assertCollection(this.contents) ? this.contents.deleteIn(path) : false;\n  }\n  /**\n   * Returns item at `key`, or `undefined` if not found. By default unwraps\n   * scalar values from their surrounding node; to disable set `keepScalar` to\n   * `true` (collections are always returned intact).\n   */\n  get(key, keepScalar) {\n    return isCollection(this.contents) ? this.contents.get(key, keepScalar) : undefined;\n  }\n  /**\n   * Returns item at `path`, or `undefined` if not found. By default unwraps\n   * scalar values from their surrounding node; to disable set `keepScalar` to\n   * `true` (collections are always returned intact).\n   */\n  getIn(path, keepScalar) {\n    if (isEmptyPath(path)) return !keepScalar && isScalar(this.contents) ? this.contents.value : this.contents;\n    return isCollection(this.contents) ? this.contents.getIn(path, keepScalar) : undefined;\n  }\n  /**\n   * Checks if the document includes a value with the key `key`.\n   */\n  has(key) {\n    return isCollection(this.contents) ? this.contents.has(key) : false;\n  }\n  /**\n   * Checks if the document includes a value at `path`.\n   */\n  hasIn(path) {\n    if (isEmptyPath(path)) return this.contents !== undefined;\n    return isCollection(this.contents) ? this.contents.hasIn(path) : false;\n  }\n  /**\n   * Sets a value in this document. For `!!set`, `value` needs to be a\n   * boolean to add/remove the item from the set.\n   */\n  set(key, value) {\n    if (this.contents == null) {\n      // @ts-expect-error We can't really know that this matches Contents.\n      this.contents = collectionFromPath(this.schema, [key], value);\n    } else if (assertCollection(this.contents)) {\n      this.contents.set(key, value);\n    }\n  }\n  /**\n   * Sets a value in this document. For `!!set`, `value` needs to be a\n   * boolean to add/remove the item from the set.\n   */\n  setIn(path, value) {\n    if (isEmptyPath(path)) {\n      // @ts-expect-error We can't really know that this matches Contents.\n      this.contents = value;\n    } else if (this.contents == null) {\n      // @ts-expect-error We can't really know that this matches Contents.\n      this.contents = collectionFromPath(this.schema, Array.from(path), value);\n    } else if (assertCollection(this.contents)) {\n      this.contents.setIn(path, value);\n    }\n  }\n  /**\n   * Change the YAML version and schema used by the document.\n   * A `null` version disables support for directives, explicit tags, anchors, and aliases.\n   * It also requires the `schema` option to be given as a `Schema` instance value.\n   *\n   * Overrides all previously set schema options.\n   */\n  setSchema(version, options = {}) {\n    if (typeof version === 'number') version = String(version);\n    let opt;\n    switch (version) {\n      case '1.1':\n        if (this.directives) this.directives.yaml.version = '1.1';else this.directives = new Directives({\n          version: '1.1'\n        });\n        opt = {\n          resolveKnownTags: false,\n          schema: 'yaml-1.1'\n        };\n        break;\n      case '1.2':\n      case 'next':\n        if (this.directives) this.directives.yaml.version = version;else this.directives = new Directives({\n          version\n        });\n        opt = {\n          resolveKnownTags: true,\n          schema: 'core'\n        };\n        break;\n      case null:\n        if (this.directives) delete this.directives;\n        opt = null;\n        break;\n      default:\n        {\n          const sv = JSON.stringify(version);\n          throw new Error(\"Expected '1.1', '1.2' or null as first argument, but found: \".concat(sv));\n        }\n    }\n    // Not using `instanceof Schema` to allow for duck typing\n    if (options.schema instanceof Object) this.schema = options.schema;else if (opt) this.schema = new Schema(Object.assign(opt, options));else throw new Error(\"With a null YAML version, the { schema: Schema } option is required\");\n  }\n  // json & jsonArg are only used from toJSON()\n  toJS({\n    json,\n    jsonArg,\n    mapAsMap,\n    maxAliasCount,\n    onAnchor,\n    reviver\n  } = {}) {\n    const ctx = {\n      anchors: new Map(),\n      doc: this,\n      keep: !json,\n      mapAsMap: mapAsMap === true,\n      mapKeyWarned: false,\n      maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n    };\n    const res = toJS(this.contents, jsonArg ?? '', ctx);\n    if (typeof onAnchor === 'function') for (const _ref2 of ctx.anchors.values()) {\n      const count = _ref2.count;\n      const res = _ref2.res;\n      onAnchor(res, count);\n    }\n    return typeof reviver === 'function' ? applyReviver(reviver, {\n      '': res\n    }, '', res) : res;\n  }\n  /**\n   * A JSON representation of the document `contents`.\n   *\n   * @param jsonArg Used by `JSON.stringify` to indicate the array index or\n   *   property name.\n   */\n  toJSON(jsonArg, onAnchor) {\n    return this.toJS({\n      json: true,\n      jsonArg,\n      mapAsMap: false,\n      onAnchor\n    });\n  }\n  /** A YAML representation of the document. */\n  toString(options = {}) {\n    if (this.errors.length > 0) throw new Error('Document with errors cannot be stringified');\n    if ('indent' in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\n      const s = JSON.stringify(options.indent);\n      throw new Error(\"\\\"indent\\\" option must be a positive integer, not \".concat(s));\n    }\n    return stringifyDocument(this, options);\n  }\n}\nfunction assertCollection(contents) {\n  if (isCollection(contents)) return true;\n  throw new Error('Expected a YAML collection as document contents');\n}\nexport { Document };","map":null,"metadata":{},"sourceType":"module"}