{"ast":null,"code":"\"use strict\";\n\n/***\n * Node External Editor\n *\n * Kevin Gravier <kevin@mrkmg.com>\n * MIT 2019\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chardet_1 = require(\"chardet\");\nvar child_process_1 = require(\"child_process\");\nvar fs_1 = require(\"fs\");\nvar iconv_lite_1 = require(\"iconv-lite\");\nvar tmp_1 = require(\"tmp\");\nvar CreateFileError_1 = require(\"./errors/CreateFileError\");\nexports.CreateFileError = CreateFileError_1.CreateFileError;\nvar LaunchEditorError_1 = require(\"./errors/LaunchEditorError\");\nexports.LaunchEditorError = LaunchEditorError_1.LaunchEditorError;\nvar ReadFileError_1 = require(\"./errors/ReadFileError\");\nexports.ReadFileError = ReadFileError_1.ReadFileError;\nvar RemoveFileError_1 = require(\"./errors/RemoveFileError\");\nexports.RemoveFileError = RemoveFileError_1.RemoveFileError;\nfunction edit(text, fileOptions) {\n  if (text === void 0) {\n    text = \"\";\n  }\n  var editor = new ExternalEditor(text, fileOptions);\n  editor.run();\n  editor.cleanup();\n  return editor.text;\n}\nexports.edit = edit;\nfunction editAsync(text, callback, fileOptions) {\n  if (text === void 0) {\n    text = \"\";\n  }\n  var editor = new ExternalEditor(text, fileOptions);\n  editor.runAsync(function (err, result) {\n    if (err) {\n      setImmediate(callback, err, null);\n    } else {\n      try {\n        editor.cleanup();\n        setImmediate(callback, null, result);\n      } catch (cleanupError) {\n        setImmediate(callback, cleanupError, null);\n      }\n    }\n  });\n}\nexports.editAsync = editAsync;\nvar ExternalEditor = /** @class */function () {\n  function ExternalEditor(text, fileOptions) {\n    if (text === void 0) {\n      text = \"\";\n    }\n    this.text = \"\";\n    this.fileOptions = {};\n    this.text = text;\n    if (fileOptions) {\n      this.fileOptions = fileOptions;\n    }\n    this.determineEditor();\n    this.createTemporaryFile();\n  }\n  ExternalEditor.splitStringBySpace = function (str) {\n    var pieces = [];\n    var currentString = \"\";\n    for (var strIndex = 0; strIndex < str.length; strIndex++) {\n      var currentLetter = str[strIndex];\n      if (strIndex > 0 && currentLetter === \" \" && str[strIndex - 1] !== \"\\\\\" && currentString.length > 0) {\n        pieces.push(currentString);\n        currentString = \"\";\n      } else {\n        currentString += currentLetter;\n      }\n    }\n    if (currentString.length > 0) {\n      pieces.push(currentString);\n    }\n    return pieces;\n  };\n  Object.defineProperty(ExternalEditor.prototype, \"temp_file\", {\n    get: function () {\n      console.log(\"DEPRECATED: temp_file. Use tempFile moving forward.\");\n      return this.tempFile;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExternalEditor.prototype, \"last_exit_status\", {\n    get: function () {\n      console.log(\"DEPRECATED: last_exit_status. Use lastExitStatus moving forward.\");\n      return this.lastExitStatus;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ExternalEditor.prototype.run = function () {\n    this.launchEditor();\n    this.readTemporaryFile();\n    return this.text;\n  };\n  ExternalEditor.prototype.runAsync = function (callback) {\n    var _this = this;\n    try {\n      this.launchEditorAsync(function () {\n        try {\n          _this.readTemporaryFile();\n          setImmediate(callback, null, _this.text);\n        } catch (readError) {\n          setImmediate(callback, readError, null);\n        }\n      });\n    } catch (launchError) {\n      setImmediate(callback, launchError, null);\n    }\n  };\n  ExternalEditor.prototype.cleanup = function () {\n    this.removeTemporaryFile();\n  };\n  ExternalEditor.prototype.determineEditor = function () {\n    var editor = process.env.VISUAL ? process.env.VISUAL : process.env.EDITOR ? process.env.EDITOR : /^win/.test(process.platform) ? \"notepad\" : \"vim\";\n    var editorOpts = ExternalEditor.splitStringBySpace(editor).map(function (piece) {\n      return piece.replace(\"\\\\ \", \" \");\n    });\n    var bin = editorOpts.shift();\n    this.editor = {\n      args: editorOpts,\n      bin: bin\n    };\n  };\n  ExternalEditor.prototype.createTemporaryFile = function () {\n    try {\n      this.tempFile = tmp_1.tmpNameSync(this.fileOptions);\n      var opt = {\n        encoding: \"utf8\"\n      };\n      if (this.fileOptions.hasOwnProperty(\"mode\")) {\n        opt.mode = this.fileOptions.mode;\n      }\n      fs_1.writeFileSync(this.tempFile, this.text, opt);\n    } catch (createFileError) {\n      throw new CreateFileError_1.CreateFileError(createFileError);\n    }\n  };\n  ExternalEditor.prototype.readTemporaryFile = function () {\n    try {\n      var tempFileBuffer = fs_1.readFileSync(this.tempFile);\n      if (tempFileBuffer.length === 0) {\n        this.text = \"\";\n      } else {\n        var encoding = chardet_1.detect(tempFileBuffer).toString();\n        if (!iconv_lite_1.encodingExists(encoding)) {\n          // Probably a bad idea, but will at least prevent crashing\n          encoding = \"utf8\";\n        }\n        this.text = iconv_lite_1.decode(tempFileBuffer, encoding);\n      }\n    } catch (readFileError) {\n      throw new ReadFileError_1.ReadFileError(readFileError);\n    }\n  };\n  ExternalEditor.prototype.removeTemporaryFile = function () {\n    try {\n      fs_1.unlinkSync(this.tempFile);\n    } catch (removeFileError) {\n      throw new RemoveFileError_1.RemoveFileError(removeFileError);\n    }\n  };\n  ExternalEditor.prototype.launchEditor = function () {\n    try {\n      var editorProcess = child_process_1.spawnSync(this.editor.bin, this.editor.args.concat([this.tempFile]), {\n        stdio: \"inherit\"\n      });\n      this.lastExitStatus = editorProcess.status;\n    } catch (launchError) {\n      throw new LaunchEditorError_1.LaunchEditorError(launchError);\n    }\n  };\n  ExternalEditor.prototype.launchEditorAsync = function (callback) {\n    var _this = this;\n    try {\n      var editorProcess = child_process_1.spawn(this.editor.bin, this.editor.args.concat([this.tempFile]), {\n        stdio: \"inherit\"\n      });\n      editorProcess.on(\"exit\", function (code) {\n        _this.lastExitStatus = code;\n        setImmediate(callback);\n      });\n    } catch (launchError) {\n      throw new LaunchEditorError_1.LaunchEditorError(launchError);\n    }\n  };\n  return ExternalEditor;\n}();\nexports.ExternalEditor = ExternalEditor;","map":null,"metadata":{},"sourceType":"script"}