{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromCallback;\nconst path = require('path');\nconst fs = require('../fs');\nconst _mkdirs = require('../mkdirs');\nconst mkdirs = _mkdirs.mkdirs;\nconst mkdirsSync = _mkdirs.mkdirsSync;\nconst _symlinkPaths = require('./symlink-paths');\nconst symlinkPaths = _symlinkPaths.symlinkPaths;\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync;\nconst _symlinkType = require('./symlink-type');\nconst symlinkType = _symlinkType.symlinkType;\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync;\nconst pathExists = require('../path-exists').pathExists;\nconst _require = require('../util/stat'),\n  areIdentical = _require.areIdentical;\nfunction createSymlink(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([fs.stat(srcpath), fs.stat(dstpath)]).then(([srcStat, dstStat]) => {\n        if (areIdentical(srcStat, dstStat)) return callback(null);\n        _createSymlink(srcpath, dstpath, type, callback);\n      });\n    } else _createSymlink(srcpath, dstpath, type, callback);\n  });\n}\nfunction _createSymlink(srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err);\n    srcpath = relative.toDst;\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err);\n      const dir = path.dirname(dstpath);\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err);\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);\n        mkdirs(dir, err => {\n          if (err) return callback(err);\n          fs.symlink(srcpath, dstpath, type, callback);\n        });\n      });\n    });\n  });\n}\nfunction createSymlinkSync(srcpath, dstpath, type) {\n  let stats;\n  try {\n    stats = fs.lstatSync(dstpath);\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath);\n    const dstStat = fs.statSync(dstpath);\n    if (areIdentical(srcStat, dstStat)) return;\n  }\n  const relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  const dir = path.dirname(dstpath);\n  const exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n};","map":null,"metadata":{},"sourceType":"script"}