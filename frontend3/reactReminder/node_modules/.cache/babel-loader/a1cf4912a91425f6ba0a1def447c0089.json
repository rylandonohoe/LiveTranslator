{"ast":null,"code":"class YAMLError extends Error {\n  constructor(name, pos, code, message) {\n    super();\n    this.name = name;\n    this.code = code;\n    this.message = message;\n    this.pos = pos;\n  }\n}\nclass YAMLParseError extends YAMLError {\n  constructor(pos, code, message) {\n    super('YAMLParseError', pos, code, message);\n  }\n}\nclass YAMLWarning extends YAMLError {\n  constructor(pos, code, message) {\n    super('YAMLWarning', pos, code, message);\n  }\n}\nconst prettifyError = (src, lc) => error => {\n  if (error.pos[0] === -1) return;\n  error.linePos = error.pos.map(pos => lc.linePos(pos));\n  const _error$linePos$ = error.linePos[0],\n    line = _error$linePos$.line,\n    col = _error$linePos$.col;\n  error.message += \" at line \".concat(line, \", column \").concat(col);\n  let ci = col - 1;\n  let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\\n\\r]+$/, '');\n  // Trim to max 80 chars, keeping col position near the middle\n  if (ci >= 60 && lineStr.length > 80) {\n    const trimStart = Math.min(ci - 39, lineStr.length - 79);\n    lineStr = '…' + lineStr.substring(trimStart);\n    ci -= trimStart - 1;\n  }\n  if (lineStr.length > 80) lineStr = lineStr.substring(0, 79) + '…';\n  // Include previous line in context if pointing at line start\n  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n    // Regexp won't match if start is trimmed\n    let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n    if (prev.length > 80) prev = prev.substring(0, 79) + '…\\n';\n    lineStr = prev + lineStr;\n  }\n  if (/[^ ]/.test(lineStr)) {\n    let count = 1;\n    const end = error.linePos[1];\n    if (end && end.line === line && end.col > col) {\n      count = Math.max(1, Math.min(end.col - col, 80 - ci));\n    }\n    const pointer = ' '.repeat(ci) + '^'.repeat(count);\n    error.message += \":\\n\\n\".concat(lineStr, \"\\n\").concat(pointer, \"\\n\");\n  }\n};\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };","map":null,"metadata":{},"sourceType":"module"}