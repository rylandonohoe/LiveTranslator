{"ast":null,"code":"import { MAP, SCALAR, SEQ } from '../nodes/identity.js';\nimport { map } from './common/map.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { getTags, coreKnownTags } from './tags.js';\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n  constructor({\n    compat,\n    customTags,\n    merge,\n    resolveKnownTags,\n    schema,\n    sortMapEntries,\n    toStringDefaults\n  }) {\n    this.compat = Array.isArray(compat) ? getTags(compat, 'compat') : compat ? getTags(null, compat) : null;\n    this.name = typeof schema === 'string' && schema || 'core';\n    this.knownTags = resolveKnownTags ? coreKnownTags : {};\n    this.tags = getTags(customTags, this.name, merge);\n    this.toStringOptions = toStringDefaults ?? null;\n    Object.defineProperty(this, MAP, {\n      value: map\n    });\n    Object.defineProperty(this, SCALAR, {\n      value: string\n    });\n    Object.defineProperty(this, SEQ, {\n      value: seq\n    });\n    // Used by createMap()\n    this.sortMapEntries = typeof sortMapEntries === 'function' ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;\n  }\n  clone() {\n    const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\n    copy.tags = this.tags.slice();\n    return copy;\n  }\n}\nexport { Schema };","map":null,"metadata":{},"sourceType":"module"}