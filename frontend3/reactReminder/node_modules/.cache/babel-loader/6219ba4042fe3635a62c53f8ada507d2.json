{"ast":null,"code":"import _slicedToArray from \"/Users/rianadutta/Downloads/mchacks12/LiveTranslator/frontend3/reactReminder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\n *\n * Includes extensions for handling Map and Set objects.\n */\nfunction applyReviver(reviver, obj, key, val) {\n  if (val && typeof val === 'object') {\n    if (Array.isArray(val)) {\n      for (let i = 0, len = val.length; i < len; ++i) {\n        const v0 = val[i];\n        const v1 = applyReviver(reviver, val, String(i), v0);\n        // eslint-disable-next-line @typescript-eslint/no-array-delete\n        if (v1 === undefined) delete val[i];else if (v1 !== v0) val[i] = v1;\n      }\n    } else if (val instanceof Map) {\n      for (const k of Array.from(val.keys())) {\n        const v0 = val.get(k);\n        const v1 = applyReviver(reviver, val, k, v0);\n        if (v1 === undefined) val.delete(k);else if (v1 !== v0) val.set(k, v1);\n      }\n    } else if (val instanceof Set) {\n      for (const v0 of Array.from(val)) {\n        const v1 = applyReviver(reviver, val, v0, v0);\n        if (v1 === undefined) val.delete(v0);else if (v1 !== v0) {\n          val.delete(v0);\n          val.add(v1);\n        }\n      }\n    } else {\n      for (const _ref of Object.entries(val)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        const k = _ref2[0];\n        const v0 = _ref2[1];\n        const v1 = applyReviver(reviver, val, k, v0);\n        if (v1 === undefined) delete val[k];else if (v1 !== v0) val[k] = v1;\n      }\n    }\n  }\n  return reviver.call(obj, key, val);\n}\nexport { applyReviver };","map":null,"metadata":{},"sourceType":"module"}