{"ast":null,"code":"import { createNode } from '../doc/createNode.js';\nimport { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { Collection } from './Collection.js';\nimport { SEQ, isScalar } from './identity.js';\nimport { isScalarValue } from './Scalar.js';\nimport { toJS } from './toJS.js';\nclass YAMLSeq extends Collection {\n  static get tagName() {\n    return 'tag:yaml.org,2002:seq';\n  }\n  constructor(schema) {\n    super(SEQ, schema);\n    this.items = [];\n  }\n  add(value) {\n    this.items.push(value);\n  }\n  /**\n   * Removes a value from the collection.\n   *\n   * `key` must contain a representation of an integer for this to succeed.\n   * It may be wrapped in a `Scalar`.\n   *\n   * @returns `true` if the item was found and removed.\n   */\n  delete(key) {\n    const idx = asItemIndex(key);\n    if (typeof idx !== 'number') return false;\n    const del = this.items.splice(idx, 1);\n    return del.length > 0;\n  }\n  get(key, keepScalar) {\n    const idx = asItemIndex(key);\n    if (typeof idx !== 'number') return undefined;\n    const it = this.items[idx];\n    return !keepScalar && isScalar(it) ? it.value : it;\n  }\n  /**\n   * Checks if the collection includes a value with the key `key`.\n   *\n   * `key` must contain a representation of an integer for this to succeed.\n   * It may be wrapped in a `Scalar`.\n   */\n  has(key) {\n    const idx = asItemIndex(key);\n    return typeof idx === 'number' && idx < this.items.length;\n  }\n  /**\n   * Sets a value in this collection. For `!!set`, `value` needs to be a\n   * boolean to add/remove the item from the set.\n   *\n   * If `key` does not contain a representation of an integer, this will throw.\n   * It may be wrapped in a `Scalar`.\n   */\n  set(key, value) {\n    const idx = asItemIndex(key);\n    if (typeof idx !== 'number') throw new Error(\"Expected a valid index, not \".concat(key, \".\"));\n    const prev = this.items[idx];\n    if (isScalar(prev) && isScalarValue(value)) prev.value = value;else this.items[idx] = value;\n  }\n  toJSON(_, ctx) {\n    const seq = [];\n    if (ctx?.onCreate) ctx.onCreate(seq);\n    let i = 0;\n    for (const item of this.items) seq.push(toJS(item, String(i++), ctx));\n    return seq;\n  }\n  toString(ctx, onComment, onChompKeep) {\n    if (!ctx) return JSON.stringify(this);\n    return stringifyCollection(this, ctx, {\n      blockItemPrefix: '- ',\n      flowChars: {\n        start: '[',\n        end: ']'\n      },\n      itemIndent: (ctx.indent || '') + '  ',\n      onChompKeep,\n      onComment\n    });\n  }\n  static from(schema, obj, ctx) {\n    const replacer = ctx.replacer;\n    const seq = new this(schema);\n    if (obj && Symbol.iterator in Object(obj)) {\n      let i = 0;\n      for (let it of obj) {\n        if (typeof replacer === 'function') {\n          const key = obj instanceof Set ? it : String(i++);\n          it = replacer.call(obj, key, it);\n        }\n        seq.items.push(createNode(it, undefined, ctx));\n      }\n    }\n    return seq;\n  }\n}\nfunction asItemIndex(key) {\n  let idx = isScalar(key) ? key.value : key;\n  if (idx && typeof idx === 'string') idx = Number(idx);\n  return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0 ? idx : null;\n}\nexport { YAMLSeq };","map":null,"metadata":{},"sourceType":"module"}