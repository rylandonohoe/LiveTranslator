{"ast":null,"code":"'use strict';\n\n/**\n * `input` type prompt\n */\nconst chalk = require('chalk');\nconst _require = require('rxjs/operators'),\n  map = _require.map,\n  takeUntil = _require.takeUntil;\nconst Base = require('./base');\nconst observe = require('../utils/events');\nclass InputPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    const events = observe(this.rl);\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {InputPrompt} self\n   */\n\n  render(error) {\n    let bottomContent = '';\n    let appendContent = '';\n    let message = this.getQuestion();\n    const transformer = this.opt.transformer;\n    const isFinal = this.status === 'answered';\n    if (isFinal) {\n      appendContent = this.answer;\n    } else {\n      appendContent = this.rl.line;\n    }\n    if (transformer) {\n      message += transformer(appendContent, this.answers, {\n        isFinal\n      });\n    } else {\n      message += isFinal ? chalk.cyan(appendContent) : appendContent;\n    }\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n    return input;\n  }\n  onEnd(state) {\n    this.answer = state.value;\n    this.status = 'answered';\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n  onError({\n    value = '',\n    isValid\n  }) {\n    this.rl.line += value;\n    this.rl.cursor += value.length;\n    this.render(isValid);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.status = 'touched';\n    this.render();\n  }\n}\nmodule.exports = InputPrompt;","map":null,"metadata":{},"sourceType":"script"}