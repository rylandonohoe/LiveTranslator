{"ast":null,"code":"'use strict';\n\n/**\n * `password` type prompt\n */\nconst chalk = require('chalk');\nconst _require = require('rxjs/operators'),\n  map = _require.map,\n  takeUntil = _require.takeUntil;\nconst Base = require('./base');\nconst observe = require('../utils/events');\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n  if (input.length === 0) {\n    return '';\n  }\n  return new Array(input.length + 1).join(maskChar);\n}\nclass PasswordPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n    const events = observe(this.rl);\n\n    // Once user confirm (enter key)\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {PasswordPrompt} self\n   */\n\n  render(error) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n    if (this.status === 'answered') {\n      message += this.getMaskedValue(this.answer);\n    } else {\n      message += this.getMaskedValue(this.rl.line || '');\n    }\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n    this.screen.render(message, bottomContent);\n  }\n  getMaskedValue(value) {\n    if (this.status === 'answered') {\n      return this.opt.mask ? chalk.cyan(mask(value, this.opt.mask)) : chalk.italic.dim('[hidden]');\n    }\n    return this.opt.mask ? mask(value, this.opt.mask) : chalk.italic.dim('[input is hidden] ');\n  }\n\n  /**\n   * Mask value during async filter/validation.\n   */\n  getSpinningValue(value) {\n    return this.getMaskedValue(value);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n    return input;\n  }\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n  onError(state) {\n    this.render(state.isValid);\n  }\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n    this.render();\n  }\n}\nmodule.exports = PasswordPrompt;","map":null,"metadata":{},"sourceType":"script"}