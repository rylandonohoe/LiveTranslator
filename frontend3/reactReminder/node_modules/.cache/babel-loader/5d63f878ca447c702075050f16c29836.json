{"ast":null,"code":"import { hasAnchor } from './identity.js';\n\n/**\n * Recursively convert any node or its contents to native JavaScript\n *\n * @param value - The input value\n * @param arg - If `value` defines a `toJSON()` method, use this\n *   as its first argument\n * @param ctx - Conversion context, originally set in Document#toJS(). If\n *   `{ keep: true }` is not set, output should be suitable for JSON\n *   stringification.\n */\nfunction toJS(value, arg, ctx) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  if (Array.isArray(value)) return value.map((v, i) => toJS(v, String(i), ctx));\n  if (value && typeof value.toJSON === 'function') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    if (!ctx || !hasAnchor(value)) return value.toJSON(arg, ctx);\n    const data = {\n      aliasCount: 0,\n      count: 1,\n      res: undefined\n    };\n    ctx.anchors.set(value, data);\n    ctx.onCreate = res => {\n      data.res = res;\n      delete ctx.onCreate;\n    };\n    const res = value.toJSON(arg, ctx);\n    if (ctx.onCreate) ctx.onCreate(res);\n    return res;\n  }\n  if (typeof value === 'bigint' && !ctx?.keep) return Number(value);\n  return value;\n}\nexport { toJS };","map":null,"metadata":{},"sourceType":"module"}