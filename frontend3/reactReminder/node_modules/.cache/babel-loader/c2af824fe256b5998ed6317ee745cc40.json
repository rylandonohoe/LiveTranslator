{"ast":null,"code":"import { applyReviver } from '../doc/applyReviver.js';\nimport { NODE_TYPE, isDocument } from './identity.js';\nimport { toJS } from './toJS.js';\nclass NodeBase {\n  constructor(type) {\n    Object.defineProperty(this, NODE_TYPE, {\n      value: type\n    });\n  }\n  /** Create a copy of this node.  */\n  clone() {\n    const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n    if (this.range) copy.range = this.range.slice();\n    return copy;\n  }\n  /** A plain JavaScript representation of this node. */\n  toJS(doc, {\n    mapAsMap,\n    maxAliasCount,\n    onAnchor,\n    reviver\n  } = {}) {\n    if (!isDocument(doc)) throw new TypeError('A document argument is required');\n    const ctx = {\n      anchors: new Map(),\n      doc,\n      keep: true,\n      mapAsMap: mapAsMap === true,\n      mapKeyWarned: false,\n      maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n    };\n    const res = toJS(this, '', ctx);\n    if (typeof onAnchor === 'function') for (const _ref of ctx.anchors.values()) {\n      const count = _ref.count;\n      const res = _ref.res;\n      onAnchor(res, count);\n    }\n    return typeof reviver === 'function' ? applyReviver(reviver, {\n      '': res\n    }, '', res) : res;\n  }\n}\nexport { NodeBase };","map":null,"metadata":{},"sourceType":"module"}