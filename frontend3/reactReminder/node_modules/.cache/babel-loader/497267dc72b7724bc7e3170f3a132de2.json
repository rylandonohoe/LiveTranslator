{"ast":null,"code":"'use strict';\n\n/**\n * Sticky bottom bar user interface\n */\nconst through = require('through');\nconst Base = require('./baseUI');\nconst rlUtils = require('../utils/readline');\nclass BottomBar extends Base {\n  constructor(opt = {}) {\n    super(opt);\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n\n  /**\n   * Helper for writing message in Prompt\n   * @param {String} message - The message to be output\n   */\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length;\n\n    // Write message to screen and setPrompt to control backspace\n    this.rl.setPrompt(msgLines[msgLines.length - 1]);\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n    this.rl.output.write(message);\n  }\n}\nmodule.exports = BottomBar;","map":null,"metadata":{},"sourceType":"script"}