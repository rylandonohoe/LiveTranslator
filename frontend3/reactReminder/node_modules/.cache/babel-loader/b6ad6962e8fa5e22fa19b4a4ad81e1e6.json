{"ast":null,"code":"/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Container);\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  return _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports;\n\n        // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n        if (existing) {\n          options.transports = Array.isArray(existing) ? existing.slice() : [existing];\n        } else {\n          options.transports = [];\n        }\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n      return this.loggers.get(id);\n    }\n\n    /**\n     * Retreives a `winston.Logger` instance for the specified `id`. If\n     * an instance does not exist, one is created.\n     * @param {!string} id - The id of the Logger to get.\n     * @param {?Object} [options] - Options for the Logger instance.\n     * @returns {Logger} - A configured Logger instance with a specified id.\n     */\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n\n    /**\n     * Check if the container has a logger with the id.\n     * @param {?string} id - The id of the Logger instance to find.\n     * @returns {boolean} - Boolean value indicating if this instance has a\n     * logger with the specified `id`.\n     */\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n\n    /**\n     * Closes a `Logger` instance with the specified `id` if it exists.\n     * If no `id` is supplied then all Loggers are closed.\n     * @param {?string} id - The id of the Logger instance to close.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n      if (id) {\n        return this._removeLogger(id);\n      }\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n\n    /**\n     * Remove a logger based on the id.\n     * @param {!string} id - The id of the logger to remove.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n      var logger = this.loggers.get(id);\n      logger.close();\n      this._delete(id);\n    }\n\n    /**\n     * Deletes a `Logger` instance with the specified `id`.\n     * @param {!string} id - The id of the Logger instance to delete from\n     * container.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n}();","map":null,"metadata":{},"sourceType":"script"}