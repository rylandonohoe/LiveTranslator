{"ast":null,"code":"/**\n * tail-file.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar _require = require('string_decoder'),\n  StringDecoder = _require.StringDecoder;\nvar _require2 = require('readable-stream'),\n  Stream = _require2.Stream;\n\n/**\n * Simple no-op function.\n * @returns {undefined}\n */\nfunction noop() {}\n\n/**\n * TODO: add function description.\n * @param {Object} options - Options for tail.\n * @param {function} iter - Iterator function to execute on every line.\n* `tail -f` a file. Options must include file.\n * @returns {mixed} - TODO: add return description.\n */\nmodule.exports = function (options, iter) {\n  var buffer = Buffer.alloc(64 * 1024);\n  var decode = new StringDecoder('utf8');\n  var stream = new Stream();\n  var buff = '';\n  var pos = 0;\n  var row = 0;\n  if (options.start === -1) {\n    delete options.start;\n  }\n  stream.readable = true;\n  stream.destroy = function () {\n    stream.destroyed = true;\n    stream.emit('end');\n    stream.emit('close');\n  };\n  fs.open(options.file, 'a+', '0644', function (err, fd) {\n    if (err) {\n      if (!iter) {\n        stream.emit('error', err);\n      } else {\n        iter(err);\n      }\n      stream.destroy();\n      return;\n    }\n    (function read() {\n      if (stream.destroyed) {\n        fs.close(fd, noop);\n        return;\n      }\n      return fs.read(fd, buffer, 0, buffer.length, pos, function (error, bytes) {\n        if (error) {\n          if (!iter) {\n            stream.emit('error', error);\n          } else {\n            iter(error);\n          }\n          stream.destroy();\n          return;\n        }\n        if (!bytes) {\n          if (buff) {\n            // eslint-disable-next-line eqeqeq\n            if (options.start == null || row > options.start) {\n              if (!iter) {\n                stream.emit('line', buff);\n              } else {\n                iter(null, buff);\n              }\n            }\n            row++;\n            buff = '';\n          }\n          return setTimeout(read, 1000);\n        }\n        var data = decode.write(buffer.slice(0, bytes));\n        if (!iter) {\n          stream.emit('data', data);\n        }\n        data = (buff + data).split(/\\n+/);\n        var l = data.length - 1;\n        var i = 0;\n        for (; i < l; i++) {\n          // eslint-disable-next-line eqeqeq\n          if (options.start == null || row > options.start) {\n            if (!iter) {\n              stream.emit('line', data[i]);\n            } else {\n              iter(null, data[i]);\n            }\n          }\n          row++;\n        }\n        buff = data[l];\n        pos += bytes;\n        return read();\n      });\n    })();\n  });\n  if (!iter) {\n    return stream;\n  }\n  return stream.destroy;\n};","map":null,"metadata":{},"sourceType":"script"}