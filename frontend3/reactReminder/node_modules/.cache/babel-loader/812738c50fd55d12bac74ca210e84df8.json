{"ast":null,"code":"import _slicedToArray from \"/Users/rianadutta/Downloads/mchacks12/LiveTranslator/frontend3/reactReminder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove item');\n/**\n * Apply a visitor to a CST document or item.\n *\n * Walks through the tree (depth-first) starting from the root, calling a\n * `visitor` function with two arguments when entering each item:\n *   - `item`: The current item, which included the following members:\n *     - `start: SourceToken[]` – Source tokens before the key or value,\n *       possibly including its anchor or tag.\n *     - `key?: Token | null` – Set for pair values. May then be `null`, if\n *       the key before the `:` separator is empty.\n *     - `sep?: SourceToken[]` – Source tokens between the key and the value,\n *       which should include the `:` map value indicator if `value` is set.\n *     - `value?: Token` – The value of a sequence item, or of a map pair.\n *   - `path`: The steps from the root to the current node, as an array of\n *     `['key' | 'value', number]` tuples.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this token, continue with\n *      next sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current item, then continue with the next one\n *   - `number`: Set the index of the next step. This is useful especially if\n *     the index of the current token has changed.\n *   - `function`: Define the next visitor for this item. After the original\n *     visitor is called on item entry, next visitors are called after handling\n *     a non-empty `key` and when exiting the item.\n */\nfunction visit(cst, visitor) {\n  if ('type' in cst && cst.type === 'document') cst = {\n    start: cst.start,\n    value: cst.value\n  };\n  _visit(Object.freeze([]), cst, visitor);\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current item */\nvisit.SKIP = SKIP;\n/** Remove the current item */\nvisit.REMOVE = REMOVE;\n/** Find the item at `path` from `cst` as the root */\nvisit.itemAtPath = (cst, path) => {\n  let item = cst;\n  for (const _ref of path) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    const field = _ref2[0];\n    const index = _ref2[1];\n    const tok = item?.[field];\n    if (tok && 'items' in tok) {\n      item = tok.items[index];\n    } else return undefined;\n  }\n  return item;\n};\n/**\n * Get the immediate parent collection of the item at `path` from `cst` as the root.\n *\n * Throws an error if the collection is not found, which should never happen if the item itself exists.\n */\nvisit.parentCollection = (cst, path) => {\n  const parent = visit.itemAtPath(cst, path.slice(0, -1));\n  const field = path[path.length - 1][0];\n  const coll = parent?.[field];\n  if (coll && 'items' in coll) return coll;\n  throw new Error('Parent collection not found');\n};\nfunction _visit(path, item, visitor) {\n  let ctrl = visitor(item, path);\n  if (typeof ctrl === 'symbol') return ctrl;\n  for (const field of ['key', 'value']) {\n    const token = item[field];\n    if (token && 'items' in token) {\n      for (let i = 0; i < token.items.length; ++i) {\n        const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);\n        if (typeof ci === 'number') i = ci - 1;else if (ci === BREAK) return BREAK;else if (ci === REMOVE) {\n          token.items.splice(i, 1);\n          i -= 1;\n        }\n      }\n      if (typeof ctrl === 'function' && field === 'key') ctrl = ctrl(item, path);\n    }\n  }\n  return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;\n}\nexport { visit };","map":null,"metadata":{},"sourceType":"module"}