{"ast":null,"code":"'use strict';\n\n/**\n * `list` type prompt\n */\nconst chalk = require('chalk');\nconst figures = require('figures');\nconst cliCursor = require('cli-cursor');\nconst runAsync = require('run-async');\nconst _require = require('rxjs/operators'),\n  flatMap = _require.flatMap,\n  map = _require.map,\n  take = _require.take,\n  takeUntil = _require.takeUntil;\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst Paginator = require('../utils/paginator');\nconst incrementListIndex = require('../utils/incrementListIndex');\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n    this.firstRender = true;\n    this.selected = 0;\n    const def = this.opt.default;\n\n    // If def is a Number, then use as index. Otherwise, check for value.\n    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (typeof def !== 'number' && def != null) {\n      const index = this.opt.choices.realChoices.findIndex(({\n        value\n      }) => value === def);\n      this.selected = Math.max(index, 0);\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, {\n      isInfinite: shouldLoop\n    });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n    const self = this;\n    const events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(events.line)).forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line.pipe(take(1), map(this.getCurrentValue.bind(this)), flatMap(value => runAsync(self.opt.filter)(value, self.answers).catch(err => err))).forEach(this.onSubmit.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n  render() {\n    // Render question\n    let message = this.getQuestion();\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = listRender(this.opt.choices, this.selected);\n      const indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.selected));\n      const realIndexPosition = this.opt.choices.reduce((acc, value, i) => {\n        // Dont count lines past the choice we are looking at\n        if (i > indexPosition) {\n          return acc;\n        }\n        // Add line if it's a separator\n        if (value.type === 'separator') {\n          return acc + 1;\n        }\n        let l = value.name;\n        // Non-strings take up one line\n        if (typeof l !== 'string') {\n          return acc + 1;\n        }\n\n        // Calculate lines taken up by string\n        l = l.split('\\n');\n        return acc + l.length;\n      }, 0) - 1;\n      message += '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n    this.firstRender = false;\n    this.screen.render(message);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(value) {\n    this.status = 'answered';\n\n    // Rerender prompt\n    this.render();\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n\n  /**\n   * When user press a key\n   */\n  onUpKey() {\n    this.selected = incrementListIndex(this.selected, 'up', this.opt);\n    this.render();\n  }\n  onDownKey() {\n    this.selected = incrementListIndex(this.selected, 'down', this.opt);\n    this.render();\n  }\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n    this.render();\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\nfunction listRender(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += \" (\".concat(typeof choice.disabled === 'string' ? choice.disabled : 'Disabled', \")\");\n      output += '\\n';\n      return;\n    }\n    const isSelected = i - separatorOffset === pointer;\n    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n    output += line + ' \\n';\n  });\n  return output.replace(/\\n$/, '');\n}\nmodule.exports = ListPrompt;","map":null,"metadata":{},"sourceType":"script"}