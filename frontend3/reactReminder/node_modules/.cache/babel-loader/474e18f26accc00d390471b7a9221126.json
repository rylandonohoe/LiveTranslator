{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst _ = {\n  filter: require('lodash/filter'),\n  map: require('lodash/map')\n};\nconst Separator = require('./separator');\nconst Choice = require('./choice');\n\n/**\n * Choices collection\n * Collection of multiple `choice` object\n */\nmodule.exports = class Choices {\n  /** @param {Array} choices  All `choice` to keep in the collection */\n  constructor(choices, answers) {\n    this.choices = choices.map(val => {\n      if (val.type === 'separator') {\n        if (!(val instanceof Separator)) {\n          val = new Separator(val.line);\n        }\n        return val;\n      }\n      return new Choice(val, answers);\n    });\n    this.realChoices = this.choices.filter(Separator.exclude).filter(item => !item.disabled);\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.choices.length;\n      },\n      set(val) {\n        this.choices.length = val;\n      }\n    });\n    Object.defineProperty(this, 'realLength', {\n      get() {\n        return this.realChoices.length;\n      },\n      set() {\n        throw new Error('Cannot set `realLength` of a Choices collection');\n      }\n    });\n  }\n\n  /**\n   * Get a valid choice from the collection\n   * @param  {Number} selector  The selected choice index\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n  getChoice(selector) {\n    assert(typeof selector === 'number');\n    return this.realChoices[selector];\n  }\n\n  /**\n   * Get a raw element from the collection\n   * @param  {Number} selector  The selected index value\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n  get(selector) {\n    assert(typeof selector === 'number');\n    return this.choices[selector];\n  }\n\n  /**\n   * Match the valid choices against a where clause\n   * @param  {Object} whereClause Lodash `where` clause\n   * @return {Array}              Matching choices or empty array\n   */\n\n  where(whereClause) {\n    return _.filter(this.realChoices, whereClause);\n  }\n\n  /**\n   * Pluck a particular key from the choices\n   * @param  {String} propertyName Property name to select\n   * @return {Array}               Selected properties\n   */\n\n  pluck(propertyName) {\n    return _.map(this.realChoices, propertyName);\n  }\n\n  // Expose usual Array methods\n  indexOf(...args) {\n    return this.choices.indexOf(...args);\n  }\n  forEach(...args) {\n    return this.choices.forEach(...args);\n  }\n  filter(...args) {\n    return this.choices.filter(...args);\n  }\n  reduce(...args) {\n    return this.choices.reduce(...args);\n  }\n  find(func) {\n    return this.choices.find(func);\n  }\n  push(...args) {\n    const objs = args.map(val => new Choice(val));\n    this.choices.push(...objs);\n    this.realChoices = this.choices.filter(Separator.exclude).filter(item => !item.disabled);\n    return this.choices;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}