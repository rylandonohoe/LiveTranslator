{"ast":null,"code":"'use strict';\n\nconst _require = require('rxjs'),\n  fromEvent = _require.fromEvent;\nconst _require2 = require('rxjs/operators'),\n  filter = _require2.filter,\n  map = _require2.map,\n  share = _require2.share,\n  takeUntil = _require2.takeUntil;\nfunction normalizeKeypressEvents(value, key) {\n  return {\n    value,\n    key: key || {}\n  };\n}\nmodule.exports = function (rl) {\n  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents).pipe(takeUntil(fromEvent(rl, 'close')))\n  // Ignore `enter` key. On the readline, we only care about the `line` event.\n  .pipe(filter(({\n    key\n  }) => key.name !== 'enter' && key.name !== 'return'));\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress,\n    normalizedUpKey: keypress.pipe(filter(({\n      key\n    }) => key.name === 'up' || key.name === 'k' || key.name === 'p' && key.ctrl), share()),\n    normalizedDownKey: keypress.pipe(filter(({\n      key\n    }) => key.name === 'down' || key.name === 'j' || key.name === 'n' && key.ctrl), share()),\n    numberKey: keypress.pipe(filter(e => e.value && '123456789'.indexOf(e.value) >= 0), map(e => Number(e.value)), share()),\n    spaceKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'space'), share()),\n    aKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'a'), share()),\n    iKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'i'), share())\n  };\n};","map":null,"metadata":{},"sourceType":"script"}