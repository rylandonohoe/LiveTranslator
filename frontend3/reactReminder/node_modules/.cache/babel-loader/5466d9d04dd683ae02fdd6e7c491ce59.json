{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/rianadutta/Downloads/mchacks12/LiveTranslator/frontend3/reactReminder/node_modules/@babel/runtime/helpers/slicedToArray\");\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst ansiStyles = require('ansi-styles');\nconst ESCAPES = new Set(['\\u001B', '\\u009B']);\nconst END_CODE = 39;\nconst wrapAnsi = code => \"\".concat(ESCAPES.values().next().value, \"[\").concat(code, \"m\");\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n  const characters = [...word];\n  let isInsideEscape = false;\n  let visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n  for (const _ref of characters.entries()) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    const index = _ref2[0];\n    const character = _ref2[1];\n    const characterLength = stringWidth(character);\n    if (visible + characterLength <= columns) {\n      rows[rows.length - 1] += character;\n    } else {\n      rows.push(character);\n      visible = 0;\n    }\n    if (ESCAPES.has(character)) {\n      isInsideEscape = true;\n    } else if (isInsideEscape && character === 'm') {\n      isInsideEscape = false;\n      continue;\n    }\n    if (isInsideEscape) {\n      continue;\n    }\n    visible += characterLength;\n    if (visible === columns && index < characters.length - 1) {\n      rows.push('');\n      visible = 0;\n    }\n  }\n\n  // It's possible that the last row we copy over is only\n  // ansi escape characters, handle this edge-case\n  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n    rows[rows.length - 2] += rows.pop();\n  }\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = str => {\n  const words = str.split(' ');\n  let last = words.length;\n  while (last > 0) {\n    if (stringWidth(words[last - 1]) > 0) {\n      break;\n    }\n    last--;\n  }\n  if (last === words.length) {\n    return str;\n  }\n  return words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n  if (options.trim !== false && string.trim() === '') {\n    return '';\n  }\n  let pre = '';\n  let ret = '';\n  let escapeCode;\n  const lengths = wordLengths(string);\n  let rows = [''];\n  for (const _ref3 of string.split(' ').entries()) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n    const index = _ref4[0];\n    const word = _ref4[1];\n    if (options.trim !== false) {\n      rows[rows.length - 1] = rows[rows.length - 1].trimLeft();\n    }\n    let rowLength = stringWidth(rows[rows.length - 1]);\n    if (index !== 0) {\n      if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n        // If we start with a new word but the current row length equals the length of the columns, add a new row\n        rows.push('');\n        rowLength = 0;\n      }\n      if (rowLength > 0 || options.trim === false) {\n        rows[rows.length - 1] += ' ';\n        rowLength++;\n      }\n    }\n\n    // In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n    if (options.hard && lengths[index] > columns) {\n      const remainingColumns = columns - rowLength;\n      const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n      const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n      if (breaksStartingNextLine < breaksStartingThisLine) {\n        rows.push('');\n      }\n      wrapWord(rows, word, columns);\n      continue;\n    }\n    if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n      if (options.wordWrap === false && rowLength < columns) {\n        wrapWord(rows, word, columns);\n        continue;\n      }\n      rows.push('');\n    }\n    if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n      wrapWord(rows, word, columns);\n      continue;\n    }\n    rows[rows.length - 1] += word;\n  }\n  if (options.trim !== false) {\n    rows = rows.map(stringVisibleTrimSpacesRight);\n  }\n  pre = rows.join('\\n');\n  for (const _ref5 of [...pre].entries()) {\n    var _ref6 = _slicedToArray(_ref5, 2);\n    const index = _ref6[0];\n    const character = _ref6[1];\n    ret += character;\n    if (ESCAPES.has(character)) {\n      const code = parseFloat(/\\d[^m]*/.exec(pre.slice(index, index + 4)));\n      escapeCode = code === END_CODE ? null : code;\n    }\n    const code = ansiStyles.codes.get(Number(escapeCode));\n    if (escapeCode && code) {\n      if (pre[index + 1] === '\\n') {\n        ret += wrapAnsi(code);\n      } else if (character === '\\n') {\n        ret += wrapAnsi(escapeCode);\n      }\n    }\n  }\n  return ret;\n};\n\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options) => {\n  return String(string).normalize().replace(/\\r\\n/g, '\\n').split('\\n').map(line => exec(line, columns, options)).join('\\n');\n};","map":null,"metadata":{},"sourceType":"script"}