{"ast":null,"code":"import { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n  if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n    const sa = JSON.stringify(anchor);\n    const msg = \"Anchor must not contain whitespace or control characters: \".concat(sa);\n    throw new Error(msg);\n  }\n  return true;\n}\nfunction anchorNames(root) {\n  const anchors = new Set();\n  visit(root, {\n    Value(_key, node) {\n      if (node.anchor) anchors.add(node.anchor);\n    }\n  });\n  return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n  for (let i = 1; true; ++i) {\n    const name = \"\".concat(prefix).concat(i);\n    if (!exclude.has(name)) return name;\n  }\n}\nfunction createNodeAnchors(doc, prefix) {\n  const aliasObjects = [];\n  const sourceObjects = new Map();\n  let prevAnchors = null;\n  return {\n    onAnchor: source => {\n      aliasObjects.push(source);\n      if (!prevAnchors) prevAnchors = anchorNames(doc);\n      const anchor = findNewAnchor(prefix, prevAnchors);\n      prevAnchors.add(anchor);\n      return anchor;\n    },\n    /**\n     * With circular references, the source node is only resolved after all\n     * of its child nodes are. This is why anchors are set only after all of\n     * the nodes have been created.\n     */\n    setAnchors: () => {\n      for (const source of aliasObjects) {\n        const ref = sourceObjects.get(source);\n        if (typeof ref === 'object' && ref.anchor && (isScalar(ref.node) || isCollection(ref.node))) {\n          ref.node.anchor = ref.anchor;\n        } else {\n          const error = new Error('Failed to resolve repeated object (this should not happen)');\n          error.source = source;\n          throw error;\n        }\n      }\n    },\n    sourceObjects\n  };\n}\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };","map":null,"metadata":{},"sourceType":"module"}