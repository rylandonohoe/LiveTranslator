{"ast":null,"code":"/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n  constructor() {\n    this.lineStarts = [];\n    /**\n     * Should be called in ascending order. Otherwise, call\n     * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n     */\n    this.addNewLine = offset => this.lineStarts.push(offset);\n    /**\n     * Performs a binary search and returns the 1-indexed { line, col }\n     * position of `offset`. If `line === 0`, `addNewLine` has never been\n     * called or `offset` is before the first known newline.\n     */\n    this.linePos = offset => {\n      let low = 0;\n      let high = this.lineStarts.length;\n      while (low < high) {\n        const mid = low + high >> 1; // Math.floor((low + high) / 2)\n        if (this.lineStarts[mid] < offset) low = mid + 1;else high = mid;\n      }\n      if (this.lineStarts[low] === offset) return {\n        line: low + 1,\n        col: 1\n      };\n      if (low === 0) return {\n        line: 0,\n        col: offset\n      };\n      const start = this.lineStarts[low - 1];\n      return {\n        line: low,\n        col: offset - start + 1\n      };\n    };\n  }\n}\nexport { LineCounter };","map":null,"metadata":{},"sourceType":"module"}