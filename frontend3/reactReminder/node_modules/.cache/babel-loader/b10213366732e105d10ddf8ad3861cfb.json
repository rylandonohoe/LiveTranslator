{"ast":null,"code":"'use strict';\n\nconst util = require('./readline');\nconst cliWidth = require('cli-width');\nconst wrapAnsi = require('wrap-ansi');\nconst stripAnsi = require('strip-ansi');\nconst stringWidth = require('string-width');\nconst ora = require('ora');\nfunction height(content) {\n  return content.split('\\n').length;\n}\n\n/** @param {string} content */\nfunction lastLine(content) {\n  return content.split('\\n').pop();\n}\nclass ScreenManager {\n  constructor(rl) {\n    // These variables are keeping information to allow correct prompt re-rendering\n    this.height = 0;\n    this.extraLinesUnderPrompt = 0;\n    this.rl = rl;\n  }\n  renderWithSpinner(content, bottomContent) {\n    if (this.spinnerId) {\n      clearInterval(this.spinnerId);\n    }\n    let spinner;\n    let contentFunc;\n    let bottomContentFunc;\n    if (bottomContent) {\n      spinner = ora(bottomContent);\n      contentFunc = () => content;\n      bottomContentFunc = () => spinner.frame();\n    } else {\n      spinner = ora(content);\n      contentFunc = () => spinner.frame();\n      bottomContentFunc = () => '';\n    }\n    this.spinnerId = setInterval(() => this.render(contentFunc(), bottomContentFunc(), true), spinner.interval);\n  }\n  render(content, bottomContent, spinning = false) {\n    if (this.spinnerId && !spinning) {\n      clearInterval(this.spinnerId);\n    }\n    this.rl.output.unmute();\n    this.clean(this.extraLinesUnderPrompt);\n\n    /**\n     * Write message to screen and setPrompt to control backspace\n     */\n\n    const promptLine = lastLine(content);\n    const rawPromptLine = stripAnsi(promptLine);\n\n    // Remove the rl.line from our prompt. We can't rely on the content of\n    // rl.line (mainly because of the password prompt), so just rely on it's\n    // length.\n    let prompt = rawPromptLine;\n    if (this.rl.line.length) {\n      prompt = prompt.slice(0, -this.rl.line.length);\n    }\n    this.rl.setPrompt(prompt);\n\n    // SetPrompt will change cursor position, now we can get correct value\n    const cursorPos = this.rl._getCursorPos();\n    const width = this.normalizedCliWidth();\n    content = this.forceLineReturn(content, width);\n    if (bottomContent) {\n      bottomContent = this.forceLineReturn(bottomContent, width);\n    }\n\n    // Manually insert an extra line if we're at the end of the line.\n    // This prevent the cursor from appearing at the beginning of the\n    // current line.\n    if (rawPromptLine.length % width === 0) {\n      content += '\\n';\n    }\n    const fullContent = content + (bottomContent ? '\\n' + bottomContent : '');\n    this.rl.output.write(fullContent);\n\n    /**\n     * Re-adjust the cursor at the correct position.\n     */\n\n    // We need to consider parts of the prompt under the cursor as part of the bottom\n    // content in order to correctly cleanup and re-render.\n    const promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;\n    const bottomContentHeight = promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);\n    if (bottomContentHeight > 0) {\n      util.up(this.rl, bottomContentHeight);\n    }\n\n    // Reset cursor at the beginning of the line\n    util.left(this.rl, stringWidth(lastLine(fullContent)));\n\n    // Adjust cursor on the right\n    if (cursorPos.cols > 0) {\n      util.right(this.rl, cursorPos.cols);\n    }\n\n    /**\n     * Set up state for next re-rendering\n     */\n    this.extraLinesUnderPrompt = bottomContentHeight;\n    this.height = height(fullContent);\n    this.rl.output.mute();\n  }\n  clean(extraLines) {\n    if (extraLines > 0) {\n      util.down(this.rl, extraLines);\n    }\n    util.clearLine(this.rl, this.height);\n  }\n  done() {\n    this.rl.setPrompt('');\n    this.rl.output.unmute();\n    this.rl.output.write('\\n');\n  }\n  releaseCursor() {\n    if (this.extraLinesUnderPrompt > 0) {\n      util.down(this.rl, this.extraLinesUnderPrompt);\n    }\n  }\n  normalizedCliWidth() {\n    const width = cliWidth({\n      defaultWidth: 80,\n      output: this.rl.output\n    });\n    return width;\n  }\n\n  /**\n   * @param {string[]} lines\n   */\n  breakLines(lines, width = this.normalizedCliWidth()) {\n    // Break lines who're longer than the cli width so we can normalize the natural line\n    // returns behavior across terminals.\n    // re: trim: false; by default, `wrap-ansi` trims whitespace, which\n    // is not what we want.\n    // re: hard: true; by default', `wrap-ansi` does soft wrapping\n    return lines.map(line => wrapAnsi(line, width, {\n      trim: false,\n      hard: true\n    }).split('\\n'));\n  }\n\n  /**\n   * @param {string} content\n   */\n  forceLineReturn(content, width = this.normalizedCliWidth()) {\n    return this.breakLines(content.split('\\n'), width).flat().join('\\n');\n  }\n}\nmodule.exports = ScreenManager;","map":null,"metadata":{},"sourceType":"script"}